#define NK 4  // Number of 32-bit words in the key (AES-128 has Nk=4)
#define NR 10 // Number of rounds (AES-128 has Nr=10)
// AES S-box
static const uint8_t sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

// AES round constants
static const uint8_t Rcon[10] = 
{0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36};


/* Routine to generate 4*(Nr+1) words */
void KeyExpansion(uint8_t* key, uint8_t* w) {
    int i = 0;

    // Copy the initial key into the first Nk words of the expanded key
    while (i < NK) {
        for (int r = 0; r < 4; ++r)
            w[4*i+r] = key[4*i+r];
        i++;
    }

    // All other round keys are found from the previous round keys.
    while (i < 4*NR + 4) {
        uint8_t temp[4]; 
        for (int r = 0; r < 4; ++r)
            temp[r] = w[4*(i-1) + r];
        if (i % NK == 0) {
            // Rotate and substitute the bytes, and add the round constant.
            uint8_t t = temp[0];
            temp[0] = sbox[temp[1]] ^ Rcon[(i/NK)-1];
            temp[1] = sbox[temp[2]];
            temp[2] = sbox[temp[3]];
            temp[3] = sbox[t];
        }
        for (int r = 0; r < 4; r++)
            w[4*i+r] = w[4*(i-NK)+r] ^ temp[r];
        i++;
    }
}

// Function to perform AES encryption on a single 16-byte block using AES-NI
void aes_encrypt(__m128i *block, uint8_t *round_keys) {
    // Initial AddRoundKey
    *block = _mm_xor_si128(*block, _mm_loadu_si128((const __m128i*)(round_keys + 0)));

    // AES rounds
    for (int i = 1; i < 10; ++i) {
        *block = _mm_aesenc_si128(*block, _mm_loadu_si128((const __m128i*)(round_keys + i * 16)));
    }

    // Final round (no MixColumns)
    *block = _mm_aesenclast_si128(*block, _mm_loadu_si128((const __m128i*)(round_keys + 160)));

    // Store the encrypted block back to the data array
    //_mm_storeu_si128((__m128i*)data, block);
}

void increment_counter(__m128i *counter) {
    *counter = _mm_add_epi64(*counter, _mm_set_epi64x(0, 1));
}

void ctr(const char* infilename, const char* outfilename, uint8_t ExpandedKey[176]){
    FILE *ifile = fopen(infilename, "rb");
    FILE *ofile = fopen(outfilename, "wb");
    if (!ifile || !ofile) {
        perror("File opening failed");
        return;
    }

    uint8_t iv[16] = {0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30};
    __m128i IV = _mm_loadu_si128((const __m128i*)iv); //load iv to register
    __m128i counter = _mm_setzero_si128();  // Initialize counter to zero
    
    uint8_t in_block[16];
    uint8_t out_block[16];
    size_t bytes_read;


    // Read the input file in 16-byte chunks, encrypt, and write to output file
    while ((bytes_read = fread(in_block, 1, 16, ifile)) > 0) {
        __m128i input = _mm_loadu_si128((const __m128i*)in_block);
        __m128i encrypted_counter = counter;
        aes_encrypt(&encrypted_counter, ExpandedKey);

        // XOR the encrypted counter with the input block
        for (size_t i = 0; i < bytes_read; ++i) {
            out_block[i] = in_block[i] ^ ((uint8_t*)&encrypted_counter)[i];
        }
        
        fwrite(out_block, 1, bytes_read, ofile);
                increment_counter(&counter);
    }
    fclose(ifile);
    fclose(ofile);
}
